#!/usr/bin/python

from sys import exit
from os import getenv
import subprocess as sp

from json import loads
import argparse

MENU = getenv("MENU", "dmenu")
OUTMAP = getenv("SWAYMENU_OUTPUTS", "eDP-1:Laptop")

# '┊│·'
sep1 = "|"
sep2 = "|"


def main():
    args = {
        "new": {
            "desc": "create a new workspace and focus it",
            "cmd": goto_new_wk,
        },
        "moveout": {
            "desc": "go with the focused window to a new workspace",
            "cmd": move_focused_win_to_new_wk,
        },
        "focus": {"desc": "focus a hidden window", "cmd": focus_win},
        "change": {"desc": "focus a hidden workspace", "cmd": change_wk},
        "bring": {
            "desc": "move a workspace to the focused output",
            "cmd": move_wk_to_focused_output,
        },
        "swap": {
            "desc": "swap the focused window with another window",
            "cmd": swap_wins,
        },
        "permute": {
            "desc": "permute all visible workspaces",
            "cmd": permute_wks,
        },
        "give": {
            "desc": "send the focused window to a hidden workspace",
            "cmd": give_win,
        },
        "take": {
            "desc": "take a window from another workspace",
            "cmd": take_win,
        },
        "hide": {
            "desc": "hide all floating scratchpad windows",
            "cmd": hide_all_float_wins,
        },
        "unhide": {
            "desc": "bring forward a scratchpad window",
            "cmd": focus_float_win,
        },
        "rename": {
            "desc": "set name of the focused workspace",
            "cmd": rename_wk,
        },
    }

    help_text = ["Available actions:"] + [
        f"{k:<8} {v['desc']}" for k, v in args.items()
    ]

    parser = argparse.ArgumentParser(
        description="Control sway with dmenu-like applications.",
        epilog="\n".join(help_text),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("action", metavar="action", choices=args.keys())
    action = parser.parse_args().action

    args[action]["cmd"]()
    return


def get_current_output():
    for wk in ipc("get_workspaces"):
        if wk["focused"]:
            return wk["output"]
    return


def rename_wk():
    command("rename workspace to " + menu([], "-p", "rename"))


def get_current_wk():
    for wk in ipc("get_workspaces"):
        if wk["focused"]:
            return str(wk["name"])
    return


def get_new_wk():
    new_wk = 0
    for wk in ipc("get_workspaces"):
        if wk["name"].isdigit():
            new_wk = max(new_wk, int(wk["name"]))
    return str(new_wk + 1)


def get_focused_wk():
    for wk in ipc("get_workspaces"):
        if wk["focused"]:
            return wk["name"]


def get_visible_wks():
    return [
        (wk["name"], wk["output"])
        for wk in ipc("get_workspaces")
        if wk["visible"]
    ]


def get_wk_data():
    wks = {}
    for wk in ipc("get_workspaces"):
        wks[wk["name"]] = {
            "output": wk["output"],
            "visible": wk["visible"],
            "focused": wk["focused"],
        }
    return wks


def get_wk_wins(wk):
    wins = []

    def leaves(node):
        for n in [*node["nodes"], *node["floating_nodes"]]:
            if len(n["nodes"]) == len(n["floating_nodes"]) == 0:
                wins.append(n)
            else:
                leaves(n)
        return

    leaves(wk)

    return wins


def get_wks(
    show_output=True,
    show_focused=False,
    show_visible=False,
    show_focused_out=True,
):
    wk_data = dict()

    out_map = {
        k: v for line in OUTMAP.split(";") for k, v in [line.split(":")]
    }

    curr_out = get_current_output()
    dw = get_wk_data()
    outputs = ipc("get_tree")["nodes"]

    for out in outputs:
        for wk in out["nodes"]:
            if wk["name"] == "__i3_scratch":
                continue

            exclude = (
                not show_focused and dw[wk["name"]]["focused"],
                not show_visible and dw[wk["name"]]["visible"],
                not show_focused_out and dw[wk["name"]]["output"] == curr_out,
            )
            if any(exclude):
                continue

            wins = get_wk_wins(wk)
            if wins:
                wk_data[wk["name"]] = ""
                if len(outputs) > 1:
                    name = out_map.get(out["name"], out["name"])

                    wk_data[wk["name"]] += (
                        f"{name.ljust(8)}{sep1} " if show_output else ""
                    )
                wk_name = f'{wk["name"].ljust(2)}'
                if not wk["name"].isdigit():
                    wk_data[wk["name"]] += f"{wk_name}"
                    continue

                wk_data[wk["name"]] += f" {sep2} ".join(
                    [win["name"] for win in wins]
                )
    return wk_data


def goto_new_wk():
    command(f"workspace {get_new_wk()}")
    return


def change_wk():
    hide_all_float_wins()
    wk = choose(get_wks())
    command(f"workspace {wk}")
    return


def move_focused_win_to_new_wk():
    wk = get_new_wk()
    command(f"move window to workspace {wk}")
    command(f"workspace {wk}")
    return


def permute_wks():
    focused_wk = get_focused_wk()
    wks = get_visible_wks()
    for i, (wk, _) in enumerate(wks):
        n_i = (i + 1) % len(wks)
        command(f"workspace --no-auto-back-and-forth {wk}")
        command(f"move workspace to output {wks[n_i][1]}")
    command(f"workspace {focused_wk}")
    return


def give_win():
    wk = choose(get_wks())
    command(f"move window to workspace {wk}")
    return


def move_wk_to_focused_output():
    out = get_current_output()
    wk = choose(
        get_wks(show_focused_out=False, show_visible=True),
    )
    command(f"workspace {wk}")
    command(f"move workspace to output {out}")
    return


def get_wins(show_visible=False, show_focused=False, show_focused_wk=False):
    wins = {}

    current_wk = get_current_wk()

    def leaves(node, wk=None):
        for n in [*node["nodes"]]:
            wk_name = n["name"] if n["type"] == "workspace" else None

            exclude = (
                not show_focused_wk and wk_name == current_wk,
                not show_visible and n.get("visible", False),
                not show_focused and n["focused"],
            )

            if any(exclude):
                continue

            is_win = (
                n["type"] == "con"
                and len(n["nodes"]) == len(n["floating_nodes"]) == 0
            )
            if is_win:
                if wk_name:
                    wins[str(n["id"])] = f'{wk}> {n["name"]}'
                else:
                    wins[str(n["id"])] = n["name"]
            else:
                leaves(n, wk=wk_name)
        return

    leaves(ipc("get_tree"))

    return wins


def focus_win():
    window = choose(get_wins())
    command(f'[con_id="{window}"] focus')
    return


def swap_wins():
    window = choose(get_wins(show_visible=True))
    command(f"swap container with con_id {window}")
    return


def take_win():
    wk = get_current_wk()
    window = choose(get_wins(show_visible=True))
    command(f"[con_id={window}] move window to workspace {wk}")
    return


def get_float_wins():
    wins = {}

    def leaves(node):
        for n in [*node["nodes"], *node["floating_nodes"]]:
            if (
                len(n["nodes"]) == len(n["floating_nodes"]) == 0
                and n["type"] == "floating_con"
            ):
                wins[str(n["id"])] = n
            else:
                leaves(n)
        return

    for out in ipc("get_tree")["nodes"]:
        leaves(out)

    return wins


def get_scratch_wins():
    wins = {}

    def leaves(node):
        c = 1
        for n in [*node["nodes"], *node["floating_nodes"]]:
            if len(n["nodes"]) == len(n["floating_nodes"]) == 0:
                wins[str(n["id"])] = f'{c}: {n["name"][:49]}'
                c += 1
            else:
                leaves(n)
        return

    for out in ipc("get_tree")["nodes"]:
        if out["name"] == "__i3":
            leaves(out)

    return wins


def focus_float_win():
    win = choose(get_float_wins())
    idn = "con_id"
    command(f"[{idn}={win}] focus")
    # command(f"[{idn}={win}] resize set 80 ppt 80 ppt")
    # command(f"[{idn}={win}] move position center")
    return


def hide_all_float_wins():
    for i, win in get_float_wins().items():
        if win["visible"]:
            command('[con_id="{i}"] focus')
            command("move scratchpad")
    return


def command(cmd):
    return call(["swaymsg", cmd])


def ipc(msg_type):
    return loads(call(["swaymsg", "-r", "-t", msg_type]))


def choose(dic):
    if not dic:
        raise Exception("No items to choose from.")
    elif len(dic) == 1:
        return list(dic.keys())[0]
    chosen_value = menu(dic.values())

    for name, value in dic.items():
        if chosen_value in value:
            return name
    return


def tostr(inp, sep="\n"):
    if isinstance(inp, str):
        return inp
    return sep.join(inp)


def call(prog, inp=None):
    try:
        return sp.check_output(prog, input=inp, text=True).strip()
    except sp.CalledProcessError:
        exit()


def menu(inp, *args):
    return call([MENU, *args], inp=tostr(inp, sep="\n"))


main()
